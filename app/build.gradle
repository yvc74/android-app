apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'jacoco'

def appSdkVersion = 27

android {
    compileSdkVersion appSdkVersion
    defaultConfig {
        applicationId "mx.ucargo.android"
        minSdkVersion 19
        targetSdkVersion appSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "mx.ucargo.android.CustomTestRunner"
    }
    buildTypes {
        debug {
            testCoverageEnabled !project.hasProperty('android.injected.invoked.from.ide')
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

jacoco {
    toolVersion = "0.7.4+"
}

dependencies {
    def supportVersion = "27.1.1"
    def daggerVersion = '2.14.1'
    def lifecycleVersion = '1.1.1'
    def roomVersion = '1.1.1-rc1'
    def mockitoKotlinVersion = '1.5.0'
    def glideVersion = '4.6.1'
    def retrofitVersion = '2.3.0'
    def espressoVersion = '3.0.1'

    kapt "com.google.dagger:dagger-compiler:$daggerVersion"
    implementation "com.google.dagger:dagger:$daggerVersion"
    implementation "com.google.dagger:dagger-android:$daggerVersion"
    implementation "com.google.dagger:dagger-android-support:$daggerVersion"
    kapt "com.google.dagger:dagger-android-processor:$daggerVersion"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
    implementation "com.android.support:appcompat-v7:$supportVersion"
    implementation "com.android.support:design:$supportVersion"

    implementation "android.arch.lifecycle:extensions:$lifecycleVersion"
    kapt "android.arch.lifecycle:compiler:$lifecycleVersion"

    implementation "android.arch.persistence.room:runtime:$roomVersion"
    implementation "android.arch.persistence.room:rxjava2:$roomVersion"
    kapt "android.arch.persistence.room:compiler:$roomVersion"

    implementation "com.github.bumptech.glide:glide:$glideVersion"
    kapt "com.github.bumptech.glide:compiler:$glideVersion"

    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:3.9.1"

    implementation "com.google.android.gms:play-services-maps:15.0.1"

    testImplementation "junit:junit:4.12"
    testImplementation "android.arch.core:core-testing:$lifecycleVersion"
    testImplementation "android.arch.persistence.room:testing:$roomVersion"
    testImplementation("com.nhaarman:mockito-kotlin:$mockitoKotlinVersion") {
        exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib'
        exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib'
    }
    testImplementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    testImplementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    testImplementation "com.squareup.retrofit2:retrofit-mock:$retrofitVersion"


    androidTestImplementation 'org.mockito:mockito-android:2.13.0'
    androidTestImplementation("com.nhaarman:mockito-kotlin:$mockitoKotlinVersion") {
        exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib'
        exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib'
    }
    androidTestImplementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    androidTestImplementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    androidTestImplementation "com.android.support.test:runner:1.0.1"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:$espressoVersion"
    androidTestImplementation "com.android.support.test.espresso:espresso-intents:$espressoVersion"
    androidTestImplementation "android.arch.core:core-testing:$lifecycleVersion"
    kaptAndroidTest "com.google.dagger:dagger-android-processor:$daggerVersion"

    androidTestImplementation('com.schibsted.spain:barista:2.3.0') {
        exclude group: 'com.android.support'
        exclude group: 'org.jetbrains.kotlin'
    }
}

task fullCoverageReport(type: JacocoReport) {
    dependsOn 'createDebugCoverageReport'
    dependsOn 'testDebugUnitTest'
    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*',
                      '**/*Test*.*', 'android/**/*.*',
                      '**/*_MembersInjector.class',
                      '**/Dagger*Component.class',
                      '**/Dagger*Component$Builder.class',
                      '**/DaggerApp*',
                      '**/*_*Factory.class',
                      '**/*ComponentImpl.class',
                      '**/*SubComponentBuilder.class',
                      '**/*_Impl*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree, kotlinDebugTree])
    executionData = fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ])
}
